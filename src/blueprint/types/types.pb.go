// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: blueprint/types/types.proto

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	blueprint/types/types.proto

It has these top-level messages:
	BluePrintCreateAccountTx
	BluePrintStateTx
	BluePrintAppState
	StateQueryParams
	StateQueryResult
*/
package types

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type BluePrintCreateAccountTx struct {
	Version int32  `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Owner   string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Data    []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *BluePrintCreateAccountTx) Reset()                    { *m = BluePrintCreateAccountTx{} }
func (m *BluePrintCreateAccountTx) String() string            { return proto.CompactTextString(m) }
func (*BluePrintCreateAccountTx) ProtoMessage()               {}
func (*BluePrintCreateAccountTx) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

func (m *BluePrintCreateAccountTx) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *BluePrintCreateAccountTx) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *BluePrintCreateAccountTx) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type BluePrintStateTx struct {
	Version int32  `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Owner   string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Data    []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *BluePrintStateTx) Reset()                    { *m = BluePrintStateTx{} }
func (m *BluePrintStateTx) String() string            { return proto.CompactTextString(m) }
func (*BluePrintStateTx) ProtoMessage()               {}
func (*BluePrintStateTx) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

func (m *BluePrintStateTx) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *BluePrintStateTx) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *BluePrintStateTx) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type BluePrintAppState struct {
	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Blob    []byte `protobuf:"bytes,2,opt,name=blob,proto3" json:"blob,omitempty"`
}

func (m *BluePrintAppState) Reset()                    { *m = BluePrintAppState{} }
func (m *BluePrintAppState) String() string            { return proto.CompactTextString(m) }
func (*BluePrintAppState) ProtoMessage()               {}
func (*BluePrintAppState) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

func (m *BluePrintAppState) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *BluePrintAppState) GetBlob() []byte {
	if m != nil {
		return m.Blob
	}
	return nil
}

type StateQueryParams struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *StateQueryParams) Reset()                    { *m = StateQueryParams{} }
func (m *StateQueryParams) String() string            { return proto.CompactTextString(m) }
func (*StateQueryParams) ProtoMessage()               {}
func (*StateQueryParams) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

func (m *StateQueryParams) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type StateQueryResult struct {
	State []byte `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *StateQueryResult) Reset()                    { *m = StateQueryResult{} }
func (m *StateQueryResult) String() string            { return proto.CompactTextString(m) }
func (*StateQueryResult) ProtoMessage()               {}
func (*StateQueryResult) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4} }

func (m *StateQueryResult) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func init() {
	proto.RegisterType((*BluePrintCreateAccountTx)(nil), "BluePrintCreateAccountTx")
	proto.RegisterType((*BluePrintStateTx)(nil), "BluePrintStateTx")
	proto.RegisterType((*BluePrintAppState)(nil), "BluePrintAppState")
	proto.RegisterType((*StateQueryParams)(nil), "StateQueryParams")
	proto.RegisterType((*StateQueryResult)(nil), "StateQueryResult")
}

func init() { proto.RegisterFile("blueprint/types/types.proto", fileDescriptorTypes) }

var fileDescriptorTypes = []byte{
	// 219 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0xd0, 0xb1, 0x4e, 0x04, 0x21,
	0x10, 0x06, 0xe0, 0xa0, 0x9e, 0xc6, 0xc9, 0x16, 0x27, 0xb1, 0x20, 0xb1, 0xd9, 0x6c, 0x45, 0xa5,
	0x85, 0x4f, 0xb0, 0xfa, 0x02, 0x27, 0x1a, 0x4b, 0x13, 0xb8, 0x9d, 0xe2, 0x12, 0x04, 0x32, 0x0c,
	0xea, 0xbd, 0xbd, 0x81, 0xf5, 0x56, 0xed, 0xaf, 0x21, 0xf3, 0xc3, 0xf0, 0x31, 0x01, 0x6e, 0x9c,
	0x2f, 0x98, 0x68, 0x17, 0xf8, 0x8e, 0xf7, 0x09, 0xf3, 0xbc, 0xde, 0x26, 0x8a, 0x1c, 0x87, 0x37,
	0x50, 0x0f, 0xbe, 0xe0, 0xa6, 0x1e, 0x3f, 0x12, 0x5a, 0xc6, 0x71, 0xbb, 0x8d, 0x25, 0xf0, 0xcb,
	0x97, 0x54, 0x70, 0xf1, 0x81, 0x94, 0x77, 0x31, 0x28, 0xd1, 0x0b, 0xbd, 0x32, 0x87, 0x28, 0xaf,
	0x61, 0x15, 0x3f, 0x03, 0x92, 0x3a, 0xe9, 0x85, 0xbe, 0x34, 0x73, 0x90, 0x12, 0xce, 0x26, 0xcb,
	0x56, 0x9d, 0xf6, 0x42, 0x77, 0xa6, 0xd5, 0xc3, 0x2b, 0xac, 0x17, 0xff, 0x99, 0x2d, 0xe3, 0x91,
	0xdc, 0x11, 0xae, 0x16, 0x77, 0x4c, 0xa9, 0xd1, 0x15, 0xb6, 0xd3, 0x44, 0x98, 0x73, 0x83, 0x3b,
	0x73, 0x88, 0x95, 0x70, 0x3e, 0xba, 0xe6, 0x76, 0xa6, 0xd5, 0x83, 0x86, 0x75, 0xbb, 0xf6, 0x54,
	0x90, 0xf6, 0x1b, 0x4b, 0xf6, 0x3d, 0xff, 0x0e, 0x20, 0xfe, 0x0c, 0xf0, 0xbf, 0xd3, 0x60, 0x2e,
	0x9e, 0x6b, 0x67, 0xae, 0x7b, 0x3f, 0x2f, 0xcd, 0xc1, 0x9d, 0xb7, 0x5f, 0xbd, 0xff, 0x0e, 0x00,
	0x00, 0xff, 0xff, 0xc7, 0x18, 0xf8, 0x7d, 0x74, 0x01, 0x00, 0x00,
}
